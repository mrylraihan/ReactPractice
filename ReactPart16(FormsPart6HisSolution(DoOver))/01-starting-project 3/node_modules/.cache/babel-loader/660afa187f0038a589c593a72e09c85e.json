{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart4RefactoringCodeDuplication(DoOver))/01-starting-project 3/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react'; // Validating opn blur meaning when the input looses focus \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(''); //working with onChange meaning every key stroke \n\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) console.log('im in a useEffect and im true!');\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    setEnteredNameIsValid(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  }; // console.log(enteredName);//will log event time the state changes because the component is getting rerendered \n\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      console.log('nothing');\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      console.log('nothing');\n      setEnteredNameIsValid(false);\n      return;\n    } else {\n      setEnteredNameIsValid(true);\n      console.log(enteredName); //Only when the form is submitted it will log the state value\n\n      setEnteredName(''); //resetting the enteredName state \n      // const enteredValue = nameInputRef.current.value\n      // console.log(enteredValue);//Only when the form is submitted it will log the ref value\n      // nameInputRef.current.value = ''//resetting the nameInputRef value \n    }\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        ref: nameInputRef,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"you dont have anything\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"NpBdDjtGXxwhrEFo1Ma3zaY+Jak=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","nameInputIsInvalid","nameInputClasses"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart4RefactoringCodeDuplication(DoOver))/01-starting-project 3/src/components/SimpleInput.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\n\n// Validating opn blur meaning when the input looses focus \n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef()\n  const [enteredName, setEnteredName] = useState('') //working with onChange meaning every key stroke \n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n  useEffect(()=>{\n    if(enteredNameIsValid)console.log('im in a useEffect and im true!');\n  },[enteredNameIsValid])\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value)\n    setEnteredNameIsValid(true)\n    if (enteredName.trim() === '') {\n    \n      setEnteredNameIsValid(false)\n      return;\n    }\n  }\n\n  // console.log(enteredName);//will log event time the state changes because the component is getting rerendered \n  const nameInputBlurHandler=()=>{\n    setEnteredNameTouched(true)\n    if (enteredName.trim() === '') {\n      console.log('nothing');\n      setEnteredNameIsValid(false)\n      return;\n    }\n  }\n  const formSubmissionHandler = event => {\n    event.preventDefault()\n    setEnteredNameTouched(true)\n   \n    if (enteredName.trim() === '') {\n      console.log('nothing');\n      setEnteredNameIsValid(false)\n      return;\n    }else{\n      setEnteredNameIsValid(true)\n      console.log(enteredName);//Only when the form is submitted it will log the state value\n      setEnteredName('')//resetting the enteredName state \n      // const enteredValue = nameInputRef.current.value\n      // console.log(enteredValue);//Only when the form is submitted it will log the ref value\n      // nameInputRef.current.value = ''//resetting the nameInputRef value \n    }\n\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} ref={nameInputRef} onBlur={nameInputBlurHandler} />\n      </div>\n      {nameInputIsInvalid && <p className='error-text'>you dont have anything</p>}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,YAAY,GAAGJ,MAAM,EAA3B;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C,CAF6B,CAEsB;;EACnD,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;EAEAF,SAAS,CAAC,MAAI;IACZ,IAAGQ,kBAAH,EAAsBI,OAAO,CAACC,GAAR,CAAY,gCAAZ;EACvB,CAFQ,EAEP,CAACL,kBAAD,CAFO,CAAT;;EAIA,MAAMM,sBAAsB,GAAGC,KAAK,IAAI;IACtCR,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;IACAR,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIH,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAE7BT,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;EACF,CARD,CAV6B,CAoB7B;;;EACA,MAAMU,oBAAoB,GAAC,MAAI;IAC7BR,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIL,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BN,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAJ,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;EACF,CAPD;;EAQA,MAAMW,qBAAqB,GAAGL,KAAK,IAAI;IACrCA,KAAK,CAACM,cAAN;IACAV,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIL,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BN,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAJ,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD,CAJD,MAIK;MACHA,qBAAqB,CAAC,IAAD,CAArB;MACAG,OAAO,CAACC,GAAR,CAAYP,WAAZ,EAFG,CAEsB;;MACzBC,cAAc,CAAC,EAAD,CAAd,CAHG,CAGe;MAClB;MACA;MACA;IACD;EAEF,CAjBD;;EAmBA,MAAMe,kBAAkB,GAAG,CAACd,kBAAD,IAAuBE,kBAAlD;EACA,MAAMa,gBAAgB,GAAGD,kBAAkB,GAAG,sBAAH,GAA4B,cAAvE;EAEA,oBACE;IAAM,QAAQ,EAAEF,qBAAhB;IAAA,wBAEE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,QAAQ,EAAET,sBAAvC;QAA+D,KAAK,EAAER,WAAtE;QAAmF,GAAG,EAAED,YAAxF;QAAsG,MAAM,EAAEc;MAA9G;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,EAMGG,kBAAkB,iBAAI;MAAG,SAAS,EAAC,YAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANzB,eAOE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAhED;;GAAMnB,W;;KAAAA,W;AAkEN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}