{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart11(PracticeProjectFoodOrderApp)/01-starting-project/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalamount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: update\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, despatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    despatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    despatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  }; //    this will be the concert cart context value \n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"vDAb7OZ5MLw4cCO8mK8PNu7rIvk=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart11(PracticeProjectFoodOrderApp)/01-starting-project/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalamount","price","amount","update","CartProvider","props","cartState","despatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAGA,MAAMC,gBAAgB,GAAE;AACpBC,EAAAA,KAAK,EAAC,EADc;AAEpBC,EAAAA,WAAW,EAAC;AAFQ,CAAxB;;AAKA,MAAMC,WAAW,GAAE,CAACC,KAAD,EAAQC,MAAR,KAAiB;AAChC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AACrB,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AACA,WAAO;AACHX,MAAAA,KAAK,EAAEY;AADJ,KAAP;AAGH;;AACD,SAAOb,gBAAP;AACH,CATD;;AAWA,MAAMc,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCnB,UAAU,CAACK,WAAD,EAAaH,gBAAb,CAAlD;;AACA,QAAMkB,oBAAoB,GAAGT,IAAI,IAAG;AAChCQ,IAAAA,kBAAkB,CAAC;AAACX,MAAAA,IAAI,EAAE,KAAP;AAAcG,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMU,yBAAyB,GAAGC,EAAE,IAAG;AACnCH,IAAAA,kBAAkB,CAAC;AAACX,MAAAA,IAAI,EAAC,QAAN;AAAec,MAAAA,EAAE,EAAEA;AAAnB,KAAD,CAAlB;AACH,GAFD,CAN0B,CAS9B;;;AACI,QAAMC,WAAW,GAAE;AACfpB,IAAAA,KAAK,EAAEe,SAAS,CAACf,KADF;AAEfC,IAAAA,WAAW,EAAEc,SAAS,CAACd,WAFR;AAGfoB,IAAAA,OAAO,EAAEJ,oBAHM;AAIfK,IAAAA,UAAU,EAAEJ;AAJG,GAAnB;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACFN,KAAK,CAACS;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAnBD;;GAAMV,Y;;KAAAA,Y;AAqBN,eAAeA,YAAf","sourcesContent":["import React, {useReducer} from 'react';\nimport CartContext from \"./cart-context\";\n\n\nconst defaultCartState ={\n    items:[],\n    totalAmount:0\n}\n\nconst cartReducer =(state, action)=>{\n    if(action.type === 'ADD'){\n        const updatedItems = state.items.concat(action.item)\n        const updatedTotalamount = state.totalAmount + action.item.price * action.item.amount;\n        return {\n            items: update\n        }\n    }\n    return defaultCartState\n};\n\nconst CartProvider = props => {\n    const [cartState, despatchCartAction] = useReducer(cartReducer,defaultCartState)\n    const addItemToCartHandler = item =>{\n        despatchCartAction({type: 'ADD', item: item});\n    };\n\n    const removeItemFromCartHandler = id =>{\n        despatchCartAction({type:'REMOVE',id: id})\n    };\n//    this will be the concert cart context value \n    const cartContext= {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    }\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n};\n\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}