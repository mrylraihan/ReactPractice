{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart11(PracticeProjectFoodOrderApp)/01-starting-project/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedITem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems[existingCartItemIndex] = updated;\n    }\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, despatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    despatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    despatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  }; //    this will be the concert cart context value \n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"vDAb7OZ5MLw4cCO8mK8PNu7rIvk=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart11(PracticeProjectFoodOrderApp)/01-starting-project/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","updatedITem","updated","CartProvider","props","cartState","despatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport CartContext from \"./cart-context\";\n\n\nconst defaultCartState ={\n    items:[],\n    totalAmount:0\n}\n\nconst cartReducer =(state, action)=>{\n    if(action.type === 'ADD'){\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n        const existingCartItemIndex = state.items.findIndex(\n            item=> item.id === action.item.id\n            );\n            const existingCartItem = state.items[existingCartItemIndex];\n            let updatedItems;\n            if(existingCartItem){\n              const  updatedItem ={\n                    ...existingCartItem,\n                    amount:existingCartItem.amount + action.item.amount\n                };\n                updatedItems = [...state.items]\n                updatedItems[existingCartItemIndex] = updatedItem\n            }else{\n                updatedItems=state.items.concat(action.item);\n            }\n            \n            return {\n                items: updatedItems,\n                totalAmount: updatedTotalAmount,\n            }\n        }\n        if(action.type === \"REMOVE\"){\n            const existingCartItemIndex = state.items.findIndex(\n                item => item.id === action.id\n                );\n                const existingItem = state.items[existingCartItemIndex];\n                const updatedTotalAmount = state.totalAmount - existingItem.price;\n                let updatedItems;\n                if(existingItem.amount === 1){\n                    updatedItems = state.items.filter(item=> item.id !== action.id);\n                }else{\n                    const updatedITem = {...existingItem, amount:existingItem.amount -1};\n                    updatedItems[existingCartItemIndex] = updated\n                }\n\n        }\n    return defaultCartState\n};\n\nconst CartProvider = props => {\n    const [cartState, despatchCartAction] = useReducer(cartReducer,defaultCartState)\n    const addItemToCartHandler = item =>{\n        despatchCartAction({type: 'ADD', item: item});\n    };\n\n    const removeItemFromCartHandler = id =>{\n        despatchCartAction({type:'REMOVE',id: id})\n    };\n//    this will be the concert cart context value \n    const cartContext= {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    }\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n};\n\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}