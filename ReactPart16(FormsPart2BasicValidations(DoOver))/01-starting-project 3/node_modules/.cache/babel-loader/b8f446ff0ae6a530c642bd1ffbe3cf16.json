{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart2BasicValidations(DoOver))/01-starting-project 3/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(''); //working with onChange meaning every key stroke \n\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [isTouched, setIsTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) console.log('im in a useEffect and im true!');\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    setEnteredNameIsValid(true);\n  }; // console.log(enteredName);//will log event time the state changes because the component is getting rerendered \n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setIsTouched(true); // add a conditional to check\n\n    if (enteredName.trim() === '') {\n      console.log('nothing');\n      setEnteredNameIsValid(false);\n      return;\n    } else {\n      setEnteredNameIsValid(true);\n      console.log(enteredName); //Only when the form is submitted it will log the state value\n\n      setEnteredName(''); //resetting the enteredName state \n\n      const enteredValue = nameInputRef.current.value;\n      console.log(enteredValue); //Only when the form is submitted it will log the ref value\n\n      nameInputRef.current.value = ''; //resetting the nameInputRef value \n    }\n  };\n\n  const isInvalid = !enteredNameIsValid && isTouched;\n  const nameInputClasses = isInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), !enteredNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"you dont have anything\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"//C4H+bQOU0mP0nuycmps258+iw=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","isTouched","setIsTouched","console","log","nameInputChangeHandler","event","target","value","formSubmissionHandler","preventDefault","trim","enteredValue","current","isInvalid","nameInputClasses"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart2BasicValidations(DoOver))/01-starting-project 3/src/components/SimpleInput.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\n\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef()\n  const [enteredName, setEnteredName] = useState('') //working with onChange meaning every key stroke \n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [isTouched, setIsTouched] = useState(false)\n\n  useEffect(()=>{\n    if(enteredNameIsValid)console.log('im in a useEffect and im true!');\n  },[enteredNameIsValid])\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value)\n    setEnteredNameIsValid(true)\n  }\n\n  // console.log(enteredName);//will log event time the state changes because the component is getting rerendered \n\n  const formSubmissionHandler = event => {\n    event.preventDefault()\n    setIsTouched(true)\n    // add a conditional to check\n    if (enteredName.trim() === '') {\n      console.log('nothing');\n      setEnteredNameIsValid(false)\n      return;\n    }else{\n      setEnteredNameIsValid(true)\n      console.log(enteredName);//Only when the form is submitted it will log the state value\n      setEnteredName('')//resetting the enteredName state \n      const enteredValue = nameInputRef.current.value\n      console.log(enteredValue);//Only when the form is submitted it will log the ref value\n      nameInputRef.current.value = ''//resetting the nameInputRef value \n    }\n\n  }\n\n const isInvalid = !enteredNameIsValid && isTouched\n  const nameInputClasses = isInvalid ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} ref={nameInputRef} />\n      </div>\n      {!enteredNameIsValid && <p className='error-text'>you dont have anything</p>}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,YAAY,GAAGJ,MAAM,EAA3B;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C,CAF6B,CAEsB;;EACnD,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;EAEAF,SAAS,CAAC,MAAI;IACZ,IAAGQ,kBAAH,EAAsBI,OAAO,CAACC,GAAR,CAAY,gCAAZ;EACvB,CAFQ,EAEP,CAACL,kBAAD,CAFO,CAAT;;EAIA,MAAMM,sBAAsB,GAAGC,KAAK,IAAI;IACtCR,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;IACAR,qBAAqB,CAAC,IAAD,CAArB;EACD,CAHD,CAV6B,CAe7B;;;EAEA,MAAMS,qBAAqB,GAAGH,KAAK,IAAI;IACrCA,KAAK,CAACI,cAAN;IACAR,YAAY,CAAC,IAAD,CAAZ,CAFqC,CAGrC;;IACA,IAAIL,WAAW,CAACc,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BR,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAJ,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD,CAJD,MAIK;MACHA,qBAAqB,CAAC,IAAD,CAArB;MACAG,OAAO,CAACC,GAAR,CAAYP,WAAZ,EAFG,CAEsB;;MACzBC,cAAc,CAAC,EAAD,CAAd,CAHG,CAGe;;MAClB,MAAMc,YAAY,GAAGhB,YAAY,CAACiB,OAAb,CAAqBL,KAA1C;MACAL,OAAO,CAACC,GAAR,CAAYQ,YAAZ,EALG,CAKuB;;MAC1BhB,YAAY,CAACiB,OAAb,CAAqBL,KAArB,GAA6B,EAA7B,CANG,CAM4B;IAChC;EAEF,CAjBD;;EAmBD,MAAMM,SAAS,GAAG,CAACf,kBAAD,IAAuBE,SAAzC;EACC,MAAMc,gBAAgB,GAAGD,SAAS,GAAG,sBAAH,GAA4B,cAA9D;EAEA,oBACE;IAAM,QAAQ,EAAEL,qBAAhB;IAAA,wBAEE;MAAK,SAAS,EAAEM,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,QAAQ,EAAEV,sBAAvC;QAA+D,KAAK,EAAER,WAAtE;QAAmF,GAAG,EAAED;MAAxF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,EAMG,CAACG,kBAAD,iBAAuB;MAAG,SAAS,EAAC,YAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAN1B,eAOE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CApDD;;GAAML,W;;KAAAA,W;AAsDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}