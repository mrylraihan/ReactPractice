{"ast":null,"code":"// create a store\n// create a ruducer\n// then dont subscribe though we will \nimport { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit'; // import redux from 'redux'\n\nconst initial = {\n  counter: 0,\n  fullName: 'Wallie R.',\n  toggle: false\n}; // call create slice , and store it somewhere\n\nconst counterSlice = createSlice({\n  // every state slice needs a name\n  name: 'counter',\n  initialState: initial,\n  // we need to set the initial state by passing the initial \n  // we already create up top\n  // then we need to add reducers to all the reducers this state slice needs \n  reducers: {\n    // now 4 methods because we have 4 different if cases before \n    // all method will receive the current state \n    increment(state) {\n      // your allowed to mutate the state, will internally return the clone state and get back a new state object even though it looks like a its mutating the state \n      state.counter++;\n    },\n\n    decrease(state) {\n      state.counter--;\n    },\n\n    // if we need data thats attached ot the action we can accept it as a argument\n    increase(state, action) {\n      state.count = state.counter + action.amount;\n    },\n\n    toggleCounter(state) {\n      state.toggle = !state.toggle;\n    }\n\n  }\n});\n\nconst countReducer = (state, action) => {\n  if (action.type === 'increment') {\n    return { ...state,\n      counter: state.counter + 1\n    };\n  } else if (action.type === 'decrement') {\n    return { ...state,\n      counter: state.counter - 1\n    };\n  } else if (action.type === 'increase') {\n    return { ...state,\n      counter: state.counter + action.amount\n    };\n  } else if (action.type === 'toggle') {\n    return { ...state,\n      toggle: !state.toggle\n    };\n  }\n\n  return state;\n}; // either way it just depends how u import it at the top, we destructured the method out of redux\n// const store = redux.createStore(countReducer, initial)\n\n\nconst store = createStore(countReducer, initial); // we need ot export this to provide the store to the react app \n\nexport default store; // now where do we import our store to use it","map":{"version":3,"names":["createStore","createSlice","initial","counter","fullName","toggle","counterSlice","name","initialState","reducers","increment","state","decrease","increase","action","count","amount","toggleCounter","countReducer","type","store"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart18(ReduxRealAppPart7ReduxToolkit)/01-starting-project 5/src/store/index.js"],"sourcesContent":["// create a store\n// create a ruducer\n// then dont subscribe though we will \nimport {createStore} from 'redux'\nimport { createSlice } from '@reduxjs/toolkit'\n// import redux from 'redux'\n\nconst initial = {counter:0, fullName:'Wallie R.', toggle:false}\n\n// call create slice , and store it somewhere\n\nconst counterSlice = createSlice({\n    // every state slice needs a name\n    name:'counter',\n    initialState: initial, // we need to set the initial state by passing the initial \n    // we already create up top\n    // then we need to add reducers to all the reducers this state slice needs \n    reducers:{\n        // now 4 methods because we have 4 different if cases before \n        // all method will receive the current state \n        increment(state){\n            // your allowed to mutate the state, will internally return the clone state and get back a new state object even though it looks like a its mutating the state \n            state.counter++;\n        },\n        decrease(state){\n            state.counter--\n        },\n        // if we need data thats attached ot the action we can accept it as a argument\n        increase(state, action){\n            state.count = state.counter + action.amount\n        },\n        toggleCounter(state){\n           state.toggle = !state.toggle\n        }\n    }\n})\n\nconst countReducer = (state, action)=>{\n    if(action.type === 'increment'){\n        return {...state, counter :state.counter + 1}\n    }else if(action.type === 'decrement'){\n        return {...state, counter :state.counter - 1}\n    }else if(action.type === 'increase'){\n        return {...state,counter :state.counter + action.amount}\n    }else if(action.type === 'toggle'){\n        return {...state,toggle: !state.toggle}\n    }\n    return state\n}\n// either way it just depends how u import it at the top, we destructured the method out of redux\n// const store = redux.createStore(countReducer, initial)\nconst store = createStore(countReducer, initial)\n\n// we need ot export this to provide the store to the react app \nexport default store;\n// now where do we import our store to use it"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AAEA,MAAMC,OAAO,GAAG;EAACC,OAAO,EAAC,CAAT;EAAYC,QAAQ,EAAC,WAArB;EAAkCC,MAAM,EAAC;AAAzC,CAAhB,C,CAEA;;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7B;EACAM,IAAI,EAAC,SAFwB;EAG7BC,YAAY,EAAEN,OAHe;EAGN;EACvB;EACA;EACAO,QAAQ,EAAC;IACL;IACA;IACAC,SAAS,CAACC,KAAD,EAAO;MACZ;MACAA,KAAK,CAACR,OAAN;IACH,CANI;;IAOLS,QAAQ,CAACD,KAAD,EAAO;MACXA,KAAK,CAACR,OAAN;IACH,CATI;;IAUL;IACAU,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAe;MACnBH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACR,OAAN,GAAgBW,MAAM,CAACE,MAArC;IACH,CAbI;;IAcLC,aAAa,CAACN,KAAD,EAAO;MACjBA,KAAK,CAACN,MAAN,GAAe,CAACM,KAAK,CAACN,MAAtB;IACF;;EAhBI;AANoB,CAAD,CAAhC;;AA0BA,MAAMa,YAAY,GAAG,CAACP,KAAD,EAAQG,MAAR,KAAiB;EAClC,IAAGA,MAAM,CAACK,IAAP,KAAgB,WAAnB,EAA+B;IAC3B,OAAO,EAAC,GAAGR,KAAJ;MAAWR,OAAO,EAAEQ,KAAK,CAACR,OAAN,GAAgB;IAApC,CAAP;EACH,CAFD,MAEM,IAAGW,MAAM,CAACK,IAAP,KAAgB,WAAnB,EAA+B;IACjC,OAAO,EAAC,GAAGR,KAAJ;MAAWR,OAAO,EAAEQ,KAAK,CAACR,OAAN,GAAgB;IAApC,CAAP;EACH,CAFK,MAEA,IAAGW,MAAM,CAACK,IAAP,KAAgB,UAAnB,EAA8B;IAChC,OAAO,EAAC,GAAGR,KAAJ;MAAUR,OAAO,EAAEQ,KAAK,CAACR,OAAN,GAAgBW,MAAM,CAACE;IAA1C,CAAP;EACH,CAFK,MAEA,IAAGF,MAAM,CAACK,IAAP,KAAgB,QAAnB,EAA4B;IAC9B,OAAO,EAAC,GAAGR,KAAJ;MAAUN,MAAM,EAAE,CAACM,KAAK,CAACN;IAAzB,CAAP;EACH;;EACD,OAAOM,KAAP;AACH,CAXD,C,CAYA;AACA;;;AACA,MAAMS,KAAK,GAAGpB,WAAW,CAACkB,YAAD,EAAehB,OAAf,CAAzB,C,CAEA;;AACA,eAAekB,KAAf,C,CACA"},"metadata":{},"sourceType":"module"}