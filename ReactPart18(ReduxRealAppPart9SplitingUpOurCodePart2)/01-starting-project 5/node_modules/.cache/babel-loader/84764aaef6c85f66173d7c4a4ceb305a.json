{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  fullName: 'Wallie R.',\n  toggle: true\n}; // call create slice , and store it somewhere\n\nconst counterSlice = createSlice({\n  // every state slice needs a name\n  name: 'counter',\n  initialState: initialCounterState,\n  // we need to set the initial state by passing the initial \n  // we already create up top\n  // then we need to add reducers to all the reducers this state slice needs \n  reducers: {\n    // now 4 methods because we have 4 different if cases before \n    // all method will receive the current state \n    increment(state) {\n      // your allowed to mutate the state, will internally return the clone state and get back a new state object even though it looks like a its mutating the state \n      state.counter++;\n    },\n\n    decrease(state) {\n      state.counter--;\n    },\n\n    // if we need data thats attached ot the action we can accept it as a argument\n    increase(state, action) {\n      // state.counter = state.counter + action.payload.num//if we pass in an object\n      state.counter = state.counter + action.payload; //if we pass in an object\n    },\n\n    toggleCounter(state) {\n      state.toggle = !state.toggle;\n    }\n\n  }\n});\nexport const countActions = counterSlice.actions; //so we can dispatch actions\n\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialCounterState","counter","fullName","toggle","counterSlice","name","initialState","reducers","increment","state","decrease","increase","action","payload","toggleCounter","countActions","actions","reducer"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart18(ReduxRealAppPart9SplitingUpOurCodePart2)/01-starting-project 5/src/store/counter.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialCounterState = { counter: 0, fullName: 'Wallie R.', toggle: true }\n\n// call create slice , and store it somewhere\nconst counterSlice = createSlice({\n    // every state slice needs a name\n    name: 'counter',\n    initialState: initialCounterState, // we need to set the initial state by passing the initial \n    // we already create up top\n    // then we need to add reducers to all the reducers this state slice needs \n    reducers: {\n        // now 4 methods because we have 4 different if cases before \n        // all method will receive the current state \n        increment(state) {\n            // your allowed to mutate the state, will internally return the clone state and get back a new state object even though it looks like a its mutating the state \n            state.counter++;\n        },\n        decrease(state) {\n            state.counter--\n        },\n        // if we need data thats attached ot the action we can accept it as a argument\n        increase(state, action) {\n            // state.counter = state.counter + action.payload.num//if we pass in an object\n            state.counter = state.counter + action.payload//if we pass in an object\n        },\n        toggleCounter(state) {\n            state.toggle = !state.toggle\n        }\n    }\n})\n\nexport const countActions = counterSlice.actions//so we can dispatch actions\n\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,QAAQ,EAAE,WAAxB;EAAqCC,MAAM,EAAE;AAA7C,CAA5B,C,CAEA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7B;EACAM,IAAI,EAAE,SAFuB;EAG7BC,YAAY,EAAEN,mBAHe;EAGM;EACnC;EACA;EACAO,QAAQ,EAAE;IACN;IACA;IACAC,SAAS,CAACC,KAAD,EAAQ;MACb;MACAA,KAAK,CAACR,OAAN;IACH,CANK;;IAONS,QAAQ,CAACD,KAAD,EAAQ;MACZA,KAAK,CAACR,OAAN;IACH,CATK;;IAUN;IACAU,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACpB;MACAH,KAAK,CAACR,OAAN,GAAgBQ,KAAK,CAACR,OAAN,GAAgBW,MAAM,CAACC,OAAvC,CAFoB,CAE0B;IACjD,CAdK;;IAeNC,aAAa,CAACL,KAAD,EAAQ;MACjBA,KAAK,CAACN,MAAN,GAAe,CAACM,KAAK,CAACN,MAAtB;IACH;;EAjBK;AANmB,CAAD,CAAhC;AA2BA,OAAO,MAAMY,YAAY,GAAGX,YAAY,CAACY,OAAlC,C,CAAyC;;AAEhD,eAAeZ,YAAY,CAACa,OAA5B"},"metadata":{},"sourceType":"module"}