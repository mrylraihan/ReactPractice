{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart2BasicValidations)/01-starting-project 2/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enterName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(true);\n  const nameInputRef = useRef();\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    setEnteredNameIsValid(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (enterName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    } // if you need every keystroke for example your going to validate it on every keystroke the state is better. \n\n\n    console.log(enterName, ' state');\n    setEnteredNameIsValid(true);\n    setEnteredName('');\n  };\n\n  const nameInputClasses = enteredNameIsValid ? 'form-control' : 'form-control invalid';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enterName,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), !enterName && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"you did'nt write anything!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"S+lcSFsReOyXZ2+5PDw5wO9Y3Sc=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","SimpleInput","props","enterName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","nameInputRef","nameInputChangeHandler","event","target","value","formSubmissionHandler","preventDefault","trim","console","log","nameInputClasses"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart2BasicValidations)/01-starting-project 2/src/components/SimpleInput.js"],"sourcesContent":["import {useRef,useState } from 'react'\n\nconst SimpleInput = (props) => {\nconst [enterName, setEnteredName] = useState('')\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(true)\n  const nameInputRef = useRef()\n\nconst nameInputChangeHandler = event=>{\n  setEnteredName(event.target.value)\n  setEnteredNameIsValid(true)\n}\n\nconst formSubmissionHandler = event=>{\n  event.preventDefault()\n  if(enterName.trim() === ''){\n    setEnteredNameIsValid(false)\n    return\n  }\n  // if you need every keystroke for example your going to validate it on every keystroke the state is better. \n  console.log(enterName, ' state');\n  setEnteredNameIsValid(true)\n  setEnteredName('')\n \n}\nconst nameInputClasses = enteredNameIsValid ? 'form-control':'form-control invalid'\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name'  value={enterName} onChange={nameInputChangeHandler} />\n        {!enterName && <p className='error-text'>you did'nt write anything!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAAQA,MAAR,EAAeC,QAAf,QAA+B,OAA/B;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC/B,MAAM,CAACC,SAAD,EAAYC,cAAZ,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;EACE,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,IAAD,CAA5D;EACA,MAAMO,YAAY,GAAGR,MAAM,EAA3B;;EAEF,MAAMS,sBAAsB,GAAGC,KAAK,IAAE;IACpCL,cAAc,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;IACAL,qBAAqB,CAAC,IAAD,CAArB;EACD,CAHD;;EAKA,MAAMM,qBAAqB,GAAGH,KAAK,IAAE;IACnCA,KAAK,CAACI,cAAN;;IACA,IAAGV,SAAS,CAACW,IAAV,OAAqB,EAAxB,EAA2B;MACzBR,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD,CALkC,CAMnC;;;IACAS,OAAO,CAACC,GAAR,CAAYb,SAAZ,EAAuB,QAAvB;IACAG,qBAAqB,CAAC,IAAD,CAArB;IACAF,cAAc,CAAC,EAAD,CAAd;EAED,CAXD;;EAYA,MAAMa,gBAAgB,GAAGZ,kBAAkB,GAAG,cAAH,GAAkB,sBAA7D;EACE,oBACE;IAAM,QAAQ,EAAEO,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEK,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA8B,KAAK,EAAEd,SAArC;QAAgD,QAAQ,EAAEK;MAA1D;QAAA;QAAA;QAAA;MAAA,QAFF,EAGG,CAACL,SAAD,iBAAc;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHjB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAnCD;;GAAMF,W;;KAAAA,W;AAqCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}