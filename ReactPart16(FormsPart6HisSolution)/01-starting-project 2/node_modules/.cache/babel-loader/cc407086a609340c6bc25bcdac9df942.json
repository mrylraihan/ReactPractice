{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart3TouchValidations)/01-starting-project 2/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enterName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const nameInputRef = useRef();\n  useEffect(() => {\n    if (enteredNameIsValid) console.log('its valid');\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    setEnteredNameIsValid(true);\n    setEnteredNameTouched(true);\n\n    if (enterName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const nameInputBlurHandler = e => {\n    setEnteredNameTouched(true);\n\n    if (enterName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // setEnteredNameTouched(true);\n\n    if (enterName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    } // if you need every keystroke for example your going to validate it on every keystroke the state is better. \n\n\n    console.log(enterName, ' state');\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef,\n        value: enterName,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"you did'nt write anything!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"90XQoPsKrAfAG+6k0D4irekRckA=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","SimpleInput","props","enterName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputRef","console","log","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","e","formSubmissionHandler","preventDefault","nameInputIsInvalid","nameInputClasses"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart3TouchValidations)/01-starting-project 2/src/components/SimpleInput.js"],"sourcesContent":["import {useEffect, useRef,useState } from 'react'\n\nconst SimpleInput = (props) => {\nconst [enterName, setEnteredName] = useState('')\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n  const nameInputRef = useRef()\n  useEffect(()=>{\n    if(enteredNameIsValid)console.log('its valid')\n  }, [enteredNameIsValid])\n\nconst nameInputChangeHandler = event=>{\n  setEnteredName(event.target.value)\n  setEnteredNameIsValid(true)\n  setEnteredNameTouched(true);\n  if (enterName.trim() === '') {\n    setEnteredNameIsValid(false)\n    return\n  }\n}\n\nconst nameInputBlurHandler =(e)=>{\n  setEnteredNameTouched(true)\n  if (enterName.trim() === '') {\n    setEnteredNameIsValid(false)\n    return\n  }\n\n}\n\nconst formSubmissionHandler = event=>{\n  event.preventDefault()\n  // setEnteredNameTouched(true);\n  if(enterName.trim() === ''){\n    setEnteredNameIsValid(false)\n    return\n  }\n  // if you need every keystroke for example your going to validate it on every keystroke the state is better. \n  console.log(enterName, ' state');\n  setEnteredName('')\n \n}\nconst nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid':'form-control'\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' ref={nameInputRef} value={enterName} onChange={nameInputChangeHandler} onBlur={nameInputBlurHandler}/>\n        {nameInputIsInvalid && <p className='error-text'>you did'nt write anything!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA0BC,QAA1B,QAA0C,OAA1C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC/B,MAAM,CAACC,SAAD,EAAYC,cAAZ,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;EACE,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAMS,YAAY,GAAGV,MAAM,EAA3B;EACAD,SAAS,CAAC,MAAI;IACZ,IAAGO,kBAAH,EAAsBK,OAAO,CAACC,GAAR,CAAY,WAAZ;EACvB,CAFQ,EAEN,CAACN,kBAAD,CAFM,CAAT;;EAIF,MAAMO,sBAAsB,GAAGC,KAAK,IAAE;IACpCT,cAAc,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;IACAT,qBAAqB,CAAC,IAAD,CAArB;IACAE,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIL,SAAS,CAACa,IAAV,OAAqB,EAAzB,EAA6B;MAC3BV,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;EACF,CARD;;EAUA,MAAMW,oBAAoB,GAAGC,CAAD,IAAK;IAC/BV,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIL,SAAS,CAACa,IAAV,OAAqB,EAAzB,EAA6B;MAC3BV,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;EAEF,CAPD;;EASA,MAAMa,qBAAqB,GAAGN,KAAK,IAAE;IACnCA,KAAK,CAACO,cAAN,GADmC,CAEnC;;IACA,IAAGjB,SAAS,CAACa,IAAV,OAAqB,EAAxB,EAA2B;MACzBV,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD,CANkC,CAOnC;;;IACAI,OAAO,CAACC,GAAR,CAAYR,SAAZ,EAAuB,QAAvB;IACAC,cAAc,CAAC,EAAD,CAAd;EAED,CAXD;;EAYA,MAAMiB,kBAAkB,GAAG,CAAChB,kBAAD,IAAuBE,kBAAlD;EACE,MAAMe,gBAAgB,GAAGD,kBAAkB,GAAG,sBAAH,GAA0B,cAArE;EACA,oBACE;IAAM,QAAQ,EAAEF,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,GAAG,EAAEb,YAAlC;QAAgD,KAAK,EAAEN,SAAvD;QAAkE,QAAQ,EAAES,sBAA5E;QAAoG,MAAM,EAAEK;MAA5G;QAAA;QAAA;QAAA;MAAA,QAFF,EAGGI,kBAAkB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAtDD;;GAAMpB,W;;KAAAA,W;AAwDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}