{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart13(ClassComponentsPart3(context))/01-starting-project 3/src/components/UserFinder.js\";\nimport React, { Fragment, Component } from 'react';\nimport Users from './Users';\nimport classes from './UserFinder.module.css';\nimport UserContext from '../store/users_context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_USERS = [{\n  id: 'u1',\n  name: 'Max'\n}, {\n  id: 'u2',\n  name: 'Manuel'\n}, {\n  id: 'u3',\n  name: 'Julie'\n}];\n\nclass UserFinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      filteredUsers: [],\n      searchTerm: ''\n    };\n  }\n\n  componentDidMount() {\n    //send http request and use this to populate the page on first initial render\n    //just like useEffect(()=>{}, [])\n    //will only run once \n    //we are loading the data when the component is mounted \n    this.setState({\n      filteredUsers: this.context.user\n    });\n  } // useEffect(() => {\n  //     setFilteredUsers(\n  //         DUMMY_USERS.filter((user) => user.name.includes(searchTerm))\n  //     );\n  // }, [searchTerm]); \n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchTerm !== this.state.searchTerm) {\n      this.setState({\n        filteredUsers: DUMMY_USERS.filter(user => user.name.includes(this.state.searchTerm))\n      });\n    }\n  }\n\n  searchChangeHandler(event) {\n    this.setState({\n      searchTerm: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.finder,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          onChange: this.searchChangeHandler.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Users, {\n        users: this.state.filteredUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n} // const UserFinder = () => {\n//     const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n//     const [searchTerm, setSearchTerm] = useState('');\n// useEffect(() => {\n//     setFilteredUsers(\n//         DUMMY_USERS.filter((user) => user.name.includes(searchTerm))\n//     );\n// }, [searchTerm]);\n// const searchChangeHandler = (event) => {\n//     setSearchTerm(event.target.value);\n// };\n// return (\n//     <Fragment>\n//     <div className={classes.finder}>\n//     <input type='search' onChange={searchChangeHandler} />\n//     </div>\n//     <Users users={filteredUsers} />\n//     </Fragment>\n// );\n// };\n\n\nUserFinder.contextType = UserContext;\nexport default UserFinder;","map":{"version":3,"names":["React","Fragment","Component","Users","classes","UserContext","DUMMY_USERS","id","name","UserFinder","constructor","state","filteredUsers","searchTerm","componentDidMount","setState","context","user","componentDidUpdate","prevProps","prevState","filter","includes","searchChangeHandler","event","target","value","render","finder","bind","contextType"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart13(ClassComponentsPart3(context))/01-starting-project 3/src/components/UserFinder.js"],"sourcesContent":["import React,{ Fragment,Component } from 'react';\nimport Users from './Users';\nimport classes from './UserFinder.module.css'\nimport UserContext from '../store/users_context';\n\nconst DUMMY_USERS = [\n    { id: 'u1', name: 'Max' },\n    { id: 'u2', name: 'Manuel' },\n    { id: 'u3', name: 'Julie' },\n];\n\nclass UserFinder extends Component {\n    static contextType = UserContext;\n    constructor(){\n        super()\n        this.state = {\n            filteredUsers:[],\n            searchTerm: ''\n        }\n    }\n\n    componentDidMount(){\n        //send http request and use this to populate the page on first initial render\n        //just like useEffect(()=>{}, [])\n        //will only run once \n        //we are loading the data when the component is mounted \n        this.setState({filteredUsers:this.context.user})\n    }\n    // useEffect(() => {\n    //     setFilteredUsers(\n    //         DUMMY_USERS.filter((user) => user.name.includes(searchTerm))\n    //     );\n    // }, [searchTerm]); \n    componentDidUpdate(prevProps, prevState){\n        if(prevState.searchTerm!== this.state.searchTerm){\n            this.setState({ filteredUsers: DUMMY_USERS.filter((user) => user.name.includes(this.state.searchTerm)) })\n        }\n    }\n\n\n    searchChangeHandler(event){\n        this.setState({searchTerm:event.target.value});\n    }\n    render(){\n        return (\n            <Fragment>\n                <div className={classes.finder}>\n                    <input type='search' onChange={this.searchChangeHandler.bind(this)} />\n                </div>\n                <Users users={this.state.filteredUsers} />\n            </Fragment>\n        );\n    }\n}\n\n// const UserFinder = () => {\n//     const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n//     const [searchTerm, setSearchTerm] = useState('');\n\n    // useEffect(() => {\n    //     setFilteredUsers(\n    //         DUMMY_USERS.filter((user) => user.name.includes(searchTerm))\n    //     );\n    // }, [searchTerm]);\n\n    // const searchChangeHandler = (event) => {\n    //     setSearchTerm(event.target.value);\n    // };\n\n    // return (\n    //     <Fragment>\n    //     <div className={classes.finder}>\n    //     <input type='search' onChange={searchChangeHandler} />\n    //     </div>\n    //     <Users users={filteredUsers} />\n    //     </Fragment>\n    // );\n// };\n\nexport default UserFinder;"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,MAAMC,WAAW,GAAG,CAChB;EAAEC,EAAE,EAAE,IAAN;EAAYC,IAAI,EAAE;AAAlB,CADgB,EAEhB;EAAED,EAAE,EAAE,IAAN;EAAYC,IAAI,EAAE;AAAlB,CAFgB,EAGhB;EAAED,EAAE,EAAE,IAAN;EAAYC,IAAI,EAAE;AAAlB,CAHgB,CAApB;;AAMA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;EAE/BQ,WAAW,GAAE;IACT;IACA,KAAKC,KAAL,GAAa;MACTC,aAAa,EAAC,EADL;MAETC,UAAU,EAAE;IAFH,CAAb;EAIH;;EAEDC,iBAAiB,GAAE;IACf;IACA;IACA;IACA;IACA,KAAKC,QAAL,CAAc;MAACH,aAAa,EAAC,KAAKI,OAAL,CAAaC;IAA5B,CAAd;EACH,CAhB8B,CAiB/B;EACA;EACA;EACA;EACA;;;EACAC,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;IACpC,IAAGA,SAAS,CAACP,UAAV,KAAwB,KAAKF,KAAL,CAAWE,UAAtC,EAAiD;MAC7C,KAAKE,QAAL,CAAc;QAAEH,aAAa,EAAEN,WAAW,CAACe,MAAZ,CAAoBJ,IAAD,IAAUA,IAAI,CAACT,IAAL,CAAUc,QAAV,CAAmB,KAAKX,KAAL,CAAWE,UAA9B,CAA7B;MAAjB,CAAd;IACH;EACJ;;EAGDU,mBAAmB,CAACC,KAAD,EAAO;IACtB,KAAKT,QAAL,CAAc;MAACF,UAAU,EAACW,KAAK,CAACC,MAAN,CAAaC;IAAzB,CAAd;EACH;;EACDC,MAAM,GAAE;IACJ,oBACI,QAAC,QAAD;MAAA,wBACI;QAAK,SAAS,EAAEvB,OAAO,CAACwB,MAAxB;QAAA,uBACI;UAAO,IAAI,EAAC,QAAZ;UAAqB,QAAQ,EAAE,KAAKL,mBAAL,CAAyBM,IAAzB,CAA8B,IAA9B;QAA/B;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAII,QAAC,KAAD;QAAO,KAAK,EAAE,KAAKlB,KAAL,CAAWC;MAAzB;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAQH;;AAzC8B,C,CA4CnC;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;;AAlEMH,U,CACKqB,W,GAAczB,W;AAmEzB,eAAeI,UAAf"},"metadata":{},"sourceType":"module"}