{"ast":null,"code":"var _jsxFileName = \"/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart7AddingCustomInputHook)/01-starting-project 2/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== '');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } // checking on every keystroke to change the validations state and if it was touched or not\n\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  }; // blue is for if the field is touched and here we are changing the validations for our error here and checking the input field\n\n\n  const nameInputBlurHandler = e => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputBlurHandler = e => {\n    setEnteredEmailTouched(true);\n  }; // on submit checking if the enterName state is empty to though an error\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // setEnteredNameTouched(true);\n\n    if (enteredNameIsValid) {\n      return;\n    } // if you need every keystroke for example your going to validate it on every keystroke the state is better. \n\n\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  }; //  checks is the enterName state is empty and if input was touched to change the class \n\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enterName,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"you did'nt write anything!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), enteredEmailIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"please enter a valid email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"5LQe5HSQaN4h30jKQacdCiERP04=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","enteredEmailIsInvalid","formIsValid","emailInputChangeHandler","event","target","nameInputBlurHandler","e","setEnteredNameTouched","emailInputBlurHandler","formSubmissionHandler","preventDefault","setEnteredName","nameInputClasses","nameInputIsInvalid","emailInputClasses","enterName","nameInputChangeHandler"],"sources":["/Volumes/Wallies Extreme SSD/VscodeWorkspaceSSD/VstudioCode/ReactPractice/ReactPart16(FormsPart7AddingCustomInputHook)/01-starting-project 2/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from 'react'\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n  const { value: enteredName, \n    isValid:enteredNameIsValid,\n    hasError: nameInputHasError,\n     valueChangeHandler: nameChangeHandler,\n      inputBlurHandler: nameBlurHandler } = useInput((value)=>value.trim() !== '');\n\n\n\n  const [enteredEmail, setEnteredEmail] = useState('')\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false)\n\n\n\n\n  const enteredEmailIsValid = enteredEmail.includes('@')\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true\n  }\n\n\n  // checking on every keystroke to change the validations state and if it was touched or not\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value)\n  }\n  // blue is for if the field is touched and here we are changing the validations for our error here and checking the input field\n  const nameInputBlurHandler = (e) => {\n    setEnteredNameTouched(true)\n  }\n  const emailInputBlurHandler = (e) => {\n    setEnteredEmailTouched(true)\n  }\n\n  // on submit checking if the enterName state is empty to though an error\n  const formSubmissionHandler = event => {\n    event.preventDefault()\n    // setEnteredNameTouched(true);\n    if (enteredNameIsValid) {\n\n      return\n    }\n    // if you need every keystroke for example your going to validate it on every keystroke the state is better. \n    setEnteredName('')\n    setEnteredEmail('')\n    setEnteredNameTouched(false)\n    setEnteredEmailTouched(false)\n\n  }\n  //  checks is the enterName state is empty and if input was touched to change the class \n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control'\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control'\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' value={enterName} onChange={nameInputChangeHandler} onBlur={nameInputBlurHandler} />\n        {/* if this true meaning enteredName is not valid and it was touched show this line of html */}\n        {nameInputIsInvalid && <p className='error-text'>you did'nt write anything!</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='name'>Your Email</label>\n        <input type='email' id='email' value={enteredEmail} onChange={emailInputChangeHandler} onBlur={emailInputBlurHandler} />\n        {/* if this true meaning enteredName is not valid and it was touched show this line of html */}\n        {enteredEmailIsInvalid && <p className='error-text'>please enter a valid email!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM;IAAEC,KAAK,EAAEC,WAAT;IACJC,OAAO,EAACC,kBADJ;IAEJC,QAAQ,EAAEC,iBAFN;IAGHC,kBAAkB,EAAEC,iBAHjB;IAIFC,gBAAgB,EAAEC;EAJhB,IAIoCZ,QAAQ,CAAEG,KAAD,IAASA,KAAK,CAACU,IAAN,OAAiB,EAA3B,CAJlD;EAQA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACiB,mBAAD,EAAsBC,sBAAtB,IAAgDlB,QAAQ,CAAC,KAAD,CAA9D;EAKA,MAAMmB,mBAAmB,GAAGJ,YAAY,CAACK,QAAb,CAAsB,GAAtB,CAA5B;EACA,MAAMC,qBAAqB,GAAG,CAACF,mBAAD,IAAwBF,mBAAtD;EAEA,IAAIK,WAAW,GAAG,KAAlB;;EACA,IAAIf,kBAAkB,IAAIY,mBAA1B,EAA+C;IAC7CG,WAAW,GAAG,IAAd;EACD,CArB4B,CAwB7B;;;EAEA,MAAMC,uBAAuB,GAAGC,KAAK,IAAI;IACvCR,eAAe,CAACQ,KAAK,CAACC,MAAN,CAAarB,KAAd,CAAf;EACD,CAFD,CA1B6B,CA6B7B;;;EACA,MAAMsB,oBAAoB,GAAIC,CAAD,IAAO;IAClCC,qBAAqB,CAAC,IAAD,CAArB;EACD,CAFD;;EAGA,MAAMC,qBAAqB,GAAIF,CAAD,IAAO;IACnCT,sBAAsB,CAAC,IAAD,CAAtB;EACD,CAFD,CAjC6B,CAqC7B;;;EACA,MAAMY,qBAAqB,GAAGN,KAAK,IAAI;IACrCA,KAAK,CAACO,cAAN,GADqC,CAErC;;IACA,IAAIxB,kBAAJ,EAAwB;MAEtB;IACD,CANoC,CAOrC;;;IACAyB,cAAc,CAAC,EAAD,CAAd;IACAhB,eAAe,CAAC,EAAD,CAAf;IACAY,qBAAqB,CAAC,KAAD,CAArB;IACAV,sBAAsB,CAAC,KAAD,CAAtB;EAED,CAbD,CAtC6B,CAoD7B;;;EAEA,MAAMe,gBAAgB,GAAGC,kBAAkB,GAAG,sBAAH,GAA4B,cAAvE;EACA,MAAMC,iBAAiB,GAAGd,qBAAqB,GAAG,sBAAH,GAA4B,cAA3E;EACA,oBACE;IAAM,QAAQ,EAAES,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,KAAK,EAAEG,SAApC;QAA+C,QAAQ,EAAEC,sBAAzD;QAAiF,MAAM,EAAEX;MAAzF;QAAA;QAAA;QAAA;MAAA,QAFF,EAIGQ,kBAAkB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAOE;MAAK,SAAS,EAAEC,iBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,OAAZ;QAAoB,EAAE,EAAC,OAAvB;QAA+B,KAAK,EAAEpB,YAAtC;QAAoD,QAAQ,EAAEQ,uBAA9D;QAAuF,MAAM,EAAEM;MAA/F;QAAA;QAAA;QAAA;MAAA,QAFF,EAIGR,qBAAqB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJ5B;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,eAaE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,QAAQ,EAAE,CAACC,WAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CA3ED;;GAAMpB,W;UAKsCD,Q;;;KALtCC,W;AA6EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}